snippet getset Skeleton Getter and Setter
	/**
	 * ${3:undocumented class variable}
	 * @var ${4:string}
	 **/
	${1:private} $${2:variable};
	${9}

	/**
	 * Getter for $this->$2
	 * @param void
	 * @return $4
	 **/
	${6:private} function get${7:Variable}() {
		return $this->$2;
	} // end function get$7()

	/**
	 * Setter for $this->$2
	 * @param $4
	 * @return void
	 **/
	$6 function set$7($arg0) {
		$this->$2 = $arg0;
		${8:return $this;}
	} // end function set$7()
snippet docf Function Skeleton
	/**
	 * ${4:undocumented function}
	 * @param ${5:void}
	 * @return ${6:void}
	 * @author ${7:`g:snips_author`}
	 **/
	${1:public }function ${2:functionName}(${3}) {
		${8}
	} // end function $2
snippet doct Unit Test Declaration
	/**
	 * ${4:undocumented function}
	 * @param ${5:void}
	 * @return ${6:void}
	 * @author ${7:`g:snips_author`}
	 * @group ${9:all}
	 * @covers ${10}
	 **/
	${1:public}function test${2:Variable}(${3}) {
		${11}
	} // end function test$2
snippet vd variable dump
	var_dump(${1});${2}
snippet cls class skeleton
	/**
	 * ${1:Undocumented Class}
	 * @package: ${2:Package}
	 * @author: ${3:`g:snips_author`}
	 **/
	class ${4:className} {
		${5}
	} // end class $4
snippet php open only
	<?php
	${1}
snippet fld hook_schema field
	'${1:field_name}' => array(
		'description' => '${2:Field Description}',
		'type' => '${3:type}',${4}
		'unsigned' => TRUE,
		'not null' => TRUE,
	),
snippet tbl hook_schema table
	$schema['${1:table_name}'] = array(
		'description' => '${2:Description of the table}',
		'fields' => array(
		  ${3}
		),
		'primary key' => array(${4}),
		'unique keys' => array(${5}),
		'foreign keys' => array(${6}),
	);
snippet foreign hook_schema foreign id relation
	'${1:relation_name}' => array(
		'table' => '${2:table}',
		'columns' => array('${3:local}' => '${4:$3}'),
	),
